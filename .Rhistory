facet_wrap(~ abs_state)
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one), col = "red")+
geom_density(mapping = aes(x = two), col = "blue")+
geom_density(mapping = aes(x = three), col = "black")+
facet_wrap(~ abs_state)+
xlab("")
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one), col = "red")+
geom_density(mapping = aes(x = two), col = "blue")+
geom_density(mapping = aes(x = three), col = "black")+
facet_wrap(~ abs_state)+
xlab("")+
scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one), col = "one")+
geom_density(mapping = aes(x = two), col = "two")+
geom_density(mapping = aes(x = three), col = "three")+
facet_wrap(~ abs_state)+
xlab("")+
scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_hamc$alpha[ , 1, 4], two = fit_hamc$alpha[ , 2, 4],
three = fit_hamc$alpha[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_hamc$alpha[ , 1, 5], two = fit_hamc$alpha[ , 2, 5],
three = fit_hamc$alpha[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_hamc$alpha[ , 1, 4], two = fit_hamc$alpha[ , 2, 4],
three = fit_hamc$alpha[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_hamc$alpha[ , 1, 5], two = fit_hamc$alpha[ , 2, 5],
three = fit_hamc$alpha[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_hamc$alpha[ , 1, 4], two = fit_hamc$alpha[ , 2, 4],
three = fit_hamc$alpha[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_hamc$alpha[ , 1, 5], two = fit_hamc$alpha[ , 2, 5],
three = fit_hamc$alpha[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+
scale_color_manual(name='Transitory State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
dim(fit_epa$groups)
group.prop <- dim(NA, dim = c(3, 6, 6))
group.prop <- array(NA, dim = c(3, 6, 6))
for(k in 1:6){
for(i in 1:3){
for(j in 1:3){
group.prop[k, i, j] <- mean(fit_epa$groups[ , i, k] == fit_epa$groups[ , j, k])
}
}
}
k
dim(fit_epa$groups)
i
j
fit_epa$groups[ 1, 4]
fit_epa$groups[, 1, 4]
fit_epa$groups[ , i, k]
group.prop <- array(NA, dim = c(3, 6, 6))
for(k in 1:3){
for(i in 1:6){
for(j in 1:6){
group.prop[k, i, j] <- mean(fit_epa$groups[ , k, i] == fit_epa$groups[ , k, j])
}
}
}
par(mfrow = c(1, 3))
for(i in 1:3){
dat <- group.prop[i, , ]
lattice::levelplot(dat, main = paste("Given state", i, sep = " "),
at=seq(0, 1, length=20), colorkey=FALSE, xlab = "", ylab = "")
}
par(mfrow = c(1,1))
par(mfrow = c(1, 3))
for(i in 1:3){
dat <- group.prop[i, , ]
print(lattice::levelplot(dat, main = paste("Given state", i, sep = " "),
at=seq(0, 1, length=20), colorkey=FALSE, xlab = "", ylab = ""))
}
par(mfrow = c(1,1))
for(i in 1:3){
dat <- group.prop[i, , ]
print(lattice::levelplot(dat, main = paste("Given state", i, sep = " "),
at=seq(0, 1, length=20), xlab = "", ylab = ""))
}
dim(fit_epa$theta)
dim(fit_epa$alpha)
dat <- fit_epa$theta[ , k, , ] - fit_epa$alpha
lattice::levelplot(dat, main = "Group 1",
at=seq(-1, 1, length=20), xlab = "", ylab = "")
dat
dim(data)
dat <- apply((fit_epa$theta[ , k, , ] - fit_epa$alpha) > 0, \(x) mean(x[drop = FALSE]))
dat <- apply((fit_epa$theta[ , k, , ] - fit_epa$alpha) > 0,1, \(x) mean(x[drop = FALSE]))
dim(dat)
dat
dat <- ((fit_epa$theta[ , k, , ] - fit_epa$alpha) > 0)
dim(dat)
mean(dat[1,,])
## Compare alpha to the matrices:
data_prob_greater_avg <- array(0, dim = c(6, 3, 5))
for(k in 1:6){
for(i in 1:3){
for(j in 1:5){
data_prob_greater_avg[k, i, j] <- mean((fit_epa$theta[ , k, i, j] - fit_epa$alpha[i, j]) > 0)
}
}
}
dim(fit_epa$alpha)
## Compare alpha to the matrices:
data_prob_greater_avg <- array(0, dim = c(6, 3, 5))
for(k in 1:6){
for(i in 1:3){
for(j in 1:5){
data_prob_greater_avg[k, i, j] <- mean((fit_epa$theta[ , k, i, j] - fit_epa$alpha[ ,i, j]) > 0)
}
}
}
par(mfrow = c(3, 2))
dat <- data_prob_greater_avg[1, , ]
lattice::levelplot(dat, main = "Group 1",
at=seq(-1, 1, length=20), xlab = "", ylab = "")
dat <- data_prob_greater_avg[2, , ]
lattice::levelplot(dat, main = "Group 2",
at=seq(-1, 1, length=20), xlab = "", ylab = "")
## Compare alpha to the matrices:
data_prob_greater_avg <- array(0, dim = c(6, 3, 5))
for(k in 1:6){
for(i in 1:3){
for(j in 1:5){
data_prob_greater_avg[k, i, j] <- mean((fit_epa$theta[ , k, i, j] - fit_epa$alpha[ ,i, j]) > 0)
}
}
}
for(k in 1:6){
dat <- fit_epa$theta[ , k, , ] - fit_epa$alpha
print(lattice::levelplot(dat, main = paste("Group", i, sep = " "),
at=seq(-1, 1, length=20), xlab = "", ylab = ""))
}
dim(dat[1,,])
import(ggplot2)
load_all()
devtools::load_all()
devtools::import("ggplot2")
vignette(package = "salso")
vignette(package = "LaplaceDemon")
vignette(package = "LaplaceDemons")
vignette(package = "LaplacesDemon")
citation("salso")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width = "75%"
)
P1 <- P2 <- matrix(c(.3, .2, .25, .15, .1,
.1, .3, .4, .1, .1,
.05, .5, .2, .1, .15), nrow = 3, ncol = 5,
byrow = TRUE)
P3 <- matrix(c(.1, .3, .3, .15, .15,
.1, .3, .4, .1, .1,
.5, .3, .1, .05, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P4 <- matrix(c(.15, .25, .3, .2, .1,
.15, .2, .45, .1, .1,
.4, .35, .1, .1, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P5 <- matrix(c(.1, .3, .3, .15, .15,
.3, .3, .25, .1, .05,
.5, .3, .1, .05, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P6 <- matrix(c(.6, .1, .1, .1, .1,
.3, .4, .1, .1, .1,
.05, .3, .45, .05, .15), nrow = 3, ncol = 5,
byrow = TRUE)
library(amcModels)
n <- 100
## Simulate data starting in state 1:
data_1_1 <- absmarkovchain(1, P1, 100)
data_2_1 <- absmarkovchain(1, P2, 100)
data_3_1 <- absmarkovchain(1, P3, 100)
data_4_1 <- absmarkovchain(1, P4, 100)
data_5_1 <- absmarkovchain(1, P5, 100)
data_6_1 <- absmarkovchain(1, P6, 100)
## Simulate data starting in state 2:
data_1_2 <- absmarkovchain(2, P1, 100)
data_2_2 <- absmarkovchain(2, P2, 100)
data_3_2 <- absmarkovchain(2, P3, 100)
data_4_2 <- absmarkovchain(2, P4, 100)
data_5_2 <- absmarkovchain(2, P5, 100)
data_6_2 <- absmarkovchain(2, P6, 100)
## Simulate data starting in state 3:
data_1_3 <- absmarkovchain(3, P1, 100)
data_2_3 <- absmarkovchain(3, P2, 100)
data_3_3 <- absmarkovchain(3, P3, 100)
data_4_3 <- absmarkovchain(3, P4, 100)
data_5_3 <- absmarkovchain(3, P5, 100)
data_6_3 <- absmarkovchain(3, P6, 100)
N <- array(0, dim = c(6, 3, 5))
## Function to apply to each sequence:
make_counts <- function(seq, N_group){
for(x in 2:length(seq)){
row.ref <- seq[x - 1]
col.ref <- seq[x]
N_group[row.ref, col.ref] <- N_group[row.ref, col.ref] + 1
}
return(N_group)
}
for(i in 1:100){
## Group 1:
N[1, , ] <- make_counts(data_1_1[[i]], N[1, , ])
N[1, , ] <- make_counts(data_1_2[[i]], N[1, , ])
N[1, , ] <- make_counts(data_1_3[[i]], N[1, , ])
## Group 2:
N[2, , ] <- make_counts(data_2_1[[i]], N[2, , ])
N[2, , ] <- make_counts(data_2_2[[i]], N[2, , ])
N[2, , ] <- make_counts(data_2_3[[i]], N[2, , ])
## Group 3:
N[3, , ] <- make_counts(data_3_1[[i]], N[3, , ])
N[3, , ] <- make_counts(data_3_2[[i]], N[3, , ])
N[3, , ] <- make_counts(data_3_3[[i]], N[3, , ])
## Group 4:
N[4, , ] <- make_counts(data_4_1[[i]], N[4, , ])
N[4, , ] <- make_counts(data_4_2[[i]], N[4, , ])
N[4, , ] <- make_counts(data_4_3[[i]], N[4, , ])
## Group 5:
N[5, , ] <- make_counts(data_5_1[[i]], N[5, , ])
N[5, , ] <- make_counts(data_5_2[[i]], N[5, , ])
N[5, , ] <- make_counts(data_5_3[[i]], N[5, , ])
## Group 6:
N[6, , ] <- make_counts(data_6_1[[i]], N[6, , ])
N[6, , ] <- make_counts(data_6_2[[i]], N[6, , ])
N[6, , ] <- make_counts(data_6_3[[i]], N[6, , ])
}
library(ggplot2)
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+
scale_color_manual(name='State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
# Fit HAMC model:
fit_hamc <- hamc(N, MCMC.cores = 1)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_hamc$alpha[ , 1, 4], two = fit_hamc$alpha[ , 2, 4],
three = fit_hamc$alpha[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_hamc$alpha[ , 1, 5], two = fit_hamc$alpha[ , 2, 5],
three = fit_hamc$alpha[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+
scale_color_manual(name='State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
fit_epa <- epa_hamc(N, method = "seq", thin = 5, MCMC.cores = 1)
rm(list = ls())
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width = "75%"
)
P1 <- P2 <- matrix(c(.3, .2, .25, .15, .1,
.1, .3, .4, .1, .1,
.05, .5, .2, .1, .15), nrow = 3, ncol = 5,
byrow = TRUE)
P3 <- matrix(c(.1, .3, .3, .15, .15,
.1, .3, .4, .1, .1,
.5, .3, .1, .05, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P4 <- matrix(c(.15, .25, .3, .2, .1,
.15, .2, .45, .1, .1,
.4, .35, .1, .1, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P5 <- matrix(c(.1, .3, .3, .15, .15,
.3, .3, .25, .1, .05,
.5, .3, .1, .05, .05), nrow = 3, ncol = 5,
byrow = TRUE)
P6 <- matrix(c(.6, .1, .1, .1, .1,
.3, .4, .1, .1, .1,
.05, .3, .45, .05, .15), nrow = 3, ncol = 5,
byrow = TRUE)
library(amcModels)
n <- 100
## Simulate data starting in state 1:
data_1_1 <- absmarkovchain(1, P1, 100)
data_2_1 <- absmarkovchain(1, P2, 100)
data_3_1 <- absmarkovchain(1, P3, 100)
data_4_1 <- absmarkovchain(1, P4, 100)
data_5_1 <- absmarkovchain(1, P5, 100)
data_6_1 <- absmarkovchain(1, P6, 100)
## Simulate data starting in state 2:
data_1_2 <- absmarkovchain(2, P1, 100)
data_2_2 <- absmarkovchain(2, P2, 100)
data_3_2 <- absmarkovchain(2, P3, 100)
data_4_2 <- absmarkovchain(2, P4, 100)
data_5_2 <- absmarkovchain(2, P5, 100)
data_6_2 <- absmarkovchain(2, P6, 100)
## Simulate data starting in state 3:
data_1_3 <- absmarkovchain(3, P1, 100)
data_2_3 <- absmarkovchain(3, P2, 100)
data_3_3 <- absmarkovchain(3, P3, 100)
data_4_3 <- absmarkovchain(3, P4, 100)
data_5_3 <- absmarkovchain(3, P5, 100)
data_6_3 <- absmarkovchain(3, P6, 100)
N <- array(0, dim = c(6, 3, 5))
## Function to apply to each sequence:
make_counts <- function(seq, N_group){
for(x in 2:length(seq)){
row.ref <- seq[x - 1]
col.ref <- seq[x]
N_group[row.ref, col.ref] <- N_group[row.ref, col.ref] + 1
}
return(N_group)
}
for(i in 1:100){
## Group 1:
N[1, , ] <- make_counts(data_1_1[[i]], N[1, , ])
N[1, , ] <- make_counts(data_1_2[[i]], N[1, , ])
N[1, , ] <- make_counts(data_1_3[[i]], N[1, , ])
## Group 2:
N[2, , ] <- make_counts(data_2_1[[i]], N[2, , ])
N[2, , ] <- make_counts(data_2_2[[i]], N[2, , ])
N[2, , ] <- make_counts(data_2_3[[i]], N[2, , ])
## Group 3:
N[3, , ] <- make_counts(data_3_1[[i]], N[3, , ])
N[3, , ] <- make_counts(data_3_2[[i]], N[3, , ])
N[3, , ] <- make_counts(data_3_3[[i]], N[3, , ])
## Group 4:
N[4, , ] <- make_counts(data_4_1[[i]], N[4, , ])
N[4, , ] <- make_counts(data_4_2[[i]], N[4, , ])
N[4, , ] <- make_counts(data_4_3[[i]], N[4, , ])
## Group 5:
N[5, , ] <- make_counts(data_5_1[[i]], N[5, , ])
N[5, , ] <- make_counts(data_5_2[[i]], N[5, , ])
N[5, , ] <- make_counts(data_5_3[[i]], N[5, , ])
## Group 6:
N[6, , ] <- make_counts(data_6_1[[i]], N[6, , ])
N[6, , ] <- make_counts(data_6_2[[i]], N[6, , ])
N[6, , ] <- make_counts(data_6_3[[i]], N[6, , ])
}
library(ggplot2)
# Fit AMC model:
fit_amc <- amc(N, xsi = 1/5)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_amc[ , 1, 4], two = fit_amc[ , 2, 4],
three = fit_amc[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_amc[ , 1, 5], two = fit_amc[ , 2, 5],
three = fit_amc[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+
scale_color_manual(name='State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
# Fit HAMC model:
fit_hamc <- hamc(N, MCMC.cores = 1)
## Look at posterior densities of going into an absorbing state:
# Format data for ggplot:
data4 <- data.frame(one = fit_hamc$alpha[ , 1, 4], two = fit_hamc$alpha[ , 2, 4],
three = fit_hamc$alpha[ , 3, 4], abs_state = "4")
data5 <- data.frame(one = fit_hamc$alpha[ , 1, 5], two = fit_hamc$alpha[ , 2, 5],
three = fit_hamc$alpha[ , 3, 5], abs_state = "5")
data_full <- rbind(data4, data5)
# Make density plot of going into given absorbing state:
ggplot(data = data_full)+
geom_density(mapping = aes(x = one, col = "one"))+
geom_density(mapping = aes(x = two, col = "two"))+
geom_density(mapping = aes(x = three, col = "three"))+
facet_wrap(~ abs_state)+
xlab("")+
theme(legend.position = "bottom")+
scale_color_manual(name='State',
breaks=c('one', 'two', 'three'),
values=c('one'='red', 'two'='blue', 'three'='black'))
fit_epa <- epa_hamc(N, method = "seq", thin = 5, MCMC.cores = 1)
# Fit HAMC model:
fit_hamc <- hamc(N, MCMC.cores = 1)
fit_epa <- epa_hamc(N, method = "seq", thin = 5, MCMC.cores = 1)
fit_epa <- epa_hamc(N, method = "seq", thin = 5, MCMC.cores = 1)
fit_epa <- epa_hamc(N, method = "seq", thin = 5, MCMC.cores = 1)
